<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy_two</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>enemy_ufo</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//DEFAULT HP

max_hp = 90;

can_be_target = false;

hp = max_hp;

target_tower_basic = noone;
target_tower_slower = noone;

movement_multiplier = 1;

slow_timer = 0;

slowed = false;

has_armor = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x -= 2*movement_multiplier;

if (slow_timer&lt;0){
    slow_timer = 0;
}

if (instance_exists(tower_slower_shot_exploded)){
    if (distance_to_object(tower_slower_shot_exploded)&lt;1){
        if(slowed){
            slow_timer -= 10;
        }else{
            slow_timer = 0;
        }
    }
}

if (movement_multiplier!=1){
    slowed = true;
    slow_timer +=1;
    if (slow_timer&gt;30){
        movement_multiplier = 1;
    }
}else{
    slowed = false;
}

if (hp&lt;=0){
    global.money += 6*global.money_multiplier;
    global.experience += 25*global.xp_multiplier;
    instance_create(x,y,explosion);
    instance_destroy();
    
}

if (x&lt;0){
    global.lives -= 1;
    instance_destroy();
}

/*target_tower = instance_nearest(x,y, tower_basic);

if (instance_exists(target_tower)){
    if (distance_to_point(target_tower.x, target_tower.y)&lt;=100){
        can_be_target = true;
    }else {
        can_be_target = false;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();


hp_draw = (hp / max_hp)*100
draw_healthbar(x-15, y-10, x+15, y-15, hp_draw, c_black, c_red, c_green, 0, true, true);
//draw_text(x,y+50,string(can_be_target));

if (slowed){
    draw_sprite(spr_snowflake, 0, x, y-50);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
