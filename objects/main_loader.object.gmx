<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!file_exists("save_test.txt")){


global.money = 45;
global.placing_tower = false;
global.lives = 10;
global.experience = 0;
global.level = 1;
global.xp_multiplier = 1;
global.money_multiplier = 1;
global.xp_needed = 50;
global.skillpoints = 0;
global.money_multiplier_level = 0;
global.xp_multiplier_level = 0;

val1 = global.xp_needed;
}else {
//main_loader
    load_save = file_text_open_read("save_test.txt");
    global.money = file_text_read_real(load_save);
    global.placing_tower = false;
    global.lives = file_text_read_real(load_save);
    global.experience = file_text_read_real(load_save);
    global.level = file_text_read_real(load_save);
    global.xp_needed = file_text_read_real(load_save);
    val1 = file_text_read_real(load_save);
    global.skillpoints = file_text_read_real(load_save);
//waves
    wave_generator.wave_cleared = false;
    wave_generator.wave_cleared_draw = false;
    wave_generator.next_wave_timer = 450;
    wave_generator.wave_number = file_text_read_real(load_save);
    wave_generator.wave_spawn_next = false;
    wave_generator.not_spawning = false;
    wave_generator.wave_message = false;
    wave_generator.timer = 0;
    
//towers
    //basic
        var tower_number;
        tower_number = file_text_read_real(load_save);
        var it;
        for (it = 0; it &lt; tower_number; it++){
            temp_x = file_text_read_real(load_save);
            temp_y = file_text_read_real(load_save);
            temp_level = file_text_read_real(load_save);
            temp_id = instance_create(temp_x, temp_y, tower_basic);
            temp_id.level = temp_level;
        }
    //slower
        tower_number = file_text_read_real(load_save);
        for (it = 0; it &lt; tower_number; it++){
            temp_x = file_text_read_real(load_save);
            temp_y = file_text_read_real(load_save);
            temp_level = file_text_read_real(load_save);
            temp_id = instance_create(temp_x, temp_y, tower_slower);
            temp_id.level = temp_level;
        }
    //laser
        tower_number = file_text_read_real(load_save);
        for (it = 0; it &lt; tower_number; it++){
            temp_x = file_text_read_real(load_save);
            temp_y = file_text_read_real(load_save);
            temp_level = file_text_read_real(load_save);
            temp_id = instance_create(temp_x, temp_y, tower_laser);
            temp_id.level = temp_level;
        }
//multipliers
    global.money_multiplier = file_text_read_real(load_save);
    global.money_multiplier_level = file_text_read_real(load_save);
    global.xp_multiplier = file_text_read_real(load_save);
    global.xp_multiplier_level = file_text_read_real(load_save);

//close
    file_text_close(load_save);
    
}
instance_create(0, 0, shop_gui);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_released(vk_escape)){
    game_end();
}else if (keyboard_check_released(vk_enter)){
    global.money += 5000;
}

if (global.lives&lt;=0){
    show_message ("Game Over");
    
    game_end();
}

if (global.experience &gt;= global.xp_needed){
    if (global.level == 1){
        global.xp_needed = 100;
        val1 = global.xp_needed - global.experience;
    }else {
        global.xp_needed *= 1.5;
        global.level++;
        global.skillpoints++;
        val1 = global.xp_needed - global.experience;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//main loader
    write_save = file_text_open_write("save_test.txt");
    file_text_write_real(write_save, global.money);
    file_text_write_real(write_save, global.lives);
    file_text_write_real(write_save, global.experience);
    file_text_write_real(write_save, global.level);
    file_text_write_real(write_save, global.xp_needed);
    file_text_write_real(write_save, val1);
    file_text_write_real(write_save, global.skillpoints);
    
//waves
    file_text_write_real(write_save, wave_generator.wave_number);
    
//towers
    //basic
        var j;
        for (j = 0; j&lt; instance_number(tower_basic); j++){
            tower_save_basic[j] = instance_find(tower_basic, j);
        }
        file_text_write_real(write_save, j);
        var k;
        for (k=0; k&lt;j; k++){
            file_text_write_real(write_save, tower_save_basic[k].x);
            file_text_write_real(write_save, tower_save_basic[k].y);
            file_text_write_real(write_save, tower_save_basic[k].level);
        }
    //slowing
        for (j=0; j&lt;instance_number(tower_slower); j++){
            tower_save_slower[j] = instance_find(tower_slower, j);
        }
        file_text_write_real(write_save, j);
        for (k=0; k&lt;j; k++){
            file_text_write_real(write_save, tower_save_slower[k].x);
            file_text_write_real(write_save, tower_save_slower[k].y);
            file_text_write_real(write_save, tower_save_slower[k].level);
        }
    //laser
        for (j=0; j&lt;instance_number(tower_laser); j++){
            tower_save_laser[j] = instance_find(tower_laser, j);
        }
        file_text_write_real(write_save, j);
        for (k=0; k&lt;j; k++){
            file_text_write_real(write_save, tower_save_laser[k].x);
            file_text_write_real(write_save, tower_save_laser[k].y);
            file_text_write_real(write_save, tower_save_laser[k].level);
        }
//multipliers
    file_text_write_real(write_save, global.money_multiplier);
    file_text_write_real(write_save, global.money_multiplier_level);
    file_text_write_real(write_save, global.xp_multiplier);      
    file_text_write_real(write_save, global.xp_multiplier_level);  
//close
    file_text_close(write_save);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(f_main);
draw_set_color(c_white);
draw_text(210, 20.5, string(global.money));
draw_text(210, 50, "Lives: " + string(global.lives));
draw_set_halign(fa_center);
draw_sprite_stretched(xp_bar, 0, room_width/2-250, room_height*0.1, ((((global.xp_needed - global.experience)/val1) *500)-500)*(-1) , 10);
draw_text(room_width/2, room_height*0.1-30, "Experience:");
draw_text(room_width/2, room_height*0.1-2, string(round(global.experience)) + "/" + string(round(global.xp_needed)));
draw_text(1296, 24, string(global.level));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
